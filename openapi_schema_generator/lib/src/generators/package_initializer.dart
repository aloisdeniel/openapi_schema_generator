import 'dart:io';

import 'package:openapi_schema_generator/src/context.dart';
import 'package:path/path.dart' as path;

class PackageInitializer {
  const PackageInitializer();
  String generatePubspec({
    required String name,
    required String description,
  }) {
    return '''name: $name
description: $description
version: 1.0.0

environment:
  sdk: '>=2.16.1 <3.0.0'

dependencies:
  dio: '>=4.0.0 <5.0.0'
  freezed_annotation: ^1.1.0
  json_annotation: ^4.4.0

dev_dependencies:
  build_runner: ^2.1.7
  freezed: ^1.1.1
  json_serializable: ^6.1.4
  lints: ^1.0.0
  test: ^1.20.1''';
  }

  String generateGitignore() {
    return '''
# See https://www.dartlang.org/guides/libraries/private-files

# Files and directories created by pub
.dart_tool/
.packages
build/
# If you're building an application, you may want to check-in your pubspec.lock
pubspec.lock

# Directory created by dartdoc
# If you don't generate documentation locally you can remove this line.
doc/api/

# Avoid committing generated Javascript files:
*.dart.js
*.info.json      # Produced by the --dump-info flag.
*.js             # When generated by dart2js. Don't specify *.js if your
                 # project includes source files written in JavaScript.
*.js_
*.js.deps
*.js.map
''';
  }

  Future<void> initialize(Context context) async {
    context.logger.info('[Initialization]');
    if (!context.outputDirectory.existsSync()) {
      context.logger.info('  * Creating root directory');
      await context.outputDirectory.create(recursive: true);
    }

    final pubspec =
        File(path.join(context.outputDirectory.path, 'pubspec.yaml'));
    if (!pubspec.existsSync()) {
      context.logger.info('  * Creating pubspec.yaml file');
      await pubspec.writeAsString(generatePubspec(
        name: context.options.packageName,
        description: context.options.packageDescription,
      ));
    }

    final gitignore =
        File(path.join(context.outputDirectory.path, '.gitignore'));
    if (!gitignore.existsSync()) {
      context.logger.info('  * Creating .gitignore file');
      await gitignore.writeAsString(generateGitignore());
    }

    final lib = Directory(path.join(context.outputDirectory.path, 'lib'));
    if (!lib.existsSync()) {
      context.logger.info('  * Creating lib directory');
      await lib.create(recursive: true);
    }

    final test = Directory(path.join(context.outputDirectory.path, 'test'));
    if (!test.existsSync()) {
      context.logger.info('  * Creating test directory');
      await test.create(recursive: true);
    }
  }
}
